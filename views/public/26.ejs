<%- include('../header') %>
        </br></br>
    <div class="title">
    <H1>—李の勉強NOTE</H1>
    </div>
    <div class="main">
    <H2>2.6 npm 使用注意事项</H2>
    </div>
    <div class="to">
    </br>
    </div>
    <div class="text_eg">
  <div class="four wide column"></div>
  <div class="eight wide column">
<h2><a id="user-content-261-npm-init" class="anchor" href="#261-npm-init" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.6.1 npm init</h2>

<p>使用 <div class="code">npm init</div> 初始化一个空项目是一个好的习惯，即使你对 package.json 及其他属性非常熟悉，<div class="code">npm init</div> 也是你开始写新的 Node.js 应用或模块的一个快捷的办法。<div class="code">npm init</div> 有智能的默认选项，比如从根目录名称推断模块名称，通过 <div class="code">~/.npmrc</div> 读取你的信息，用你的 Git 设置来确定 repository 等等。</p>

<h2><a id="user-content-262-npm-install" class="anchor" href="#262-npm-install" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.6.2 npm install</h2>

<p><div class="code">npm install</div> 是我们最常用的 npm 命令之一，因此我们需要好好了解下这个命令。终端输入 <div class="code">npm install -h</div> 查看使用方式:</p>

<p><a href="/img/book/2.6.1.png" target="_blank"><img src="/img/book/2.6.1.png" alt="" style="max-width:100%;"></a></p>

<p>可以看出：我们通过 <div class="code">npm install</div> 可以安装 npm 上发布的某个版本、某个tag、某个版本区间的模块，甚至可以安装本地目录、压缩包和 git/github 的库作为依赖。</p>

<blockquote>
<p>小提示: <div class="code">npm i</div> 是 <div class="code">npm install</div> 的简写，建议使用 <div class="code">npm i</div>。</p>
</blockquote>

<p>直接使用 <div class="code">npm i</div> 安装的模块是不会写入 package.json 的 dependencies (或 devDependencies)，需要额外加个参数:</p>

<ol>
<li><div class="code">npm i express --save</div>/<div class="code">npm i express -S</div> (安装 express，同时将 <div class="code">"express": "^4.14.0"</div> 写入 dependencies )</li>
<li><div class="code">npm i express --save-dev</div>/<div class="code">npm i express -D</div> (安装 express，同时将 <div class="code">"express": "^4.14.0"</div> 写入 devDependencies )</li>
<li><div class="code">npm i express --save --save-exact</div> (安装 express，同时将 <div class="code">"express": "4.14.0"</div> 写入 dependencies )</li>
</ol>

<p>第三种方式将固定版本号写入 dependencies，建议线上的 Node.js 应用都采取这种锁定版本号的方式，因为你不可能保证第三方模块下个小版本是没有验证 bug 的，即使是很流行的模块。拿 Mongoose 来说，Mongoose 4.1.4 引入了一个 bug 导致调用一个文档 entry 的 remove 会删除整个集合的文档，见：<a href="https://github.com/Automattic/mongoose/blob/master/History.md#415--2015-09-01">https://github.com/Automattic/mongoose/blob/master/History.md#415--2015-09-01</a>。</p>

<blockquote>
<p>后面会介绍更安全的 <div class="code">npm shrinkwrap</div> 的用法。</p>
</blockquote>

<p>运行以下命令：</p>

<div class="code">npm config set save-exact true
</div>

<p>这样每次 <div class="code">npm i xxx --save</div> 的时候会锁定依赖的版本号，相当于加了 <div class="code">--save-exact</div> 参数。</p>

<blockquote>
<p>小提示：<div class="code">npm config set</div> 命令将配置写到了 ~/.npmrc 文件，运行 <div class="code">npm config list</div> 查看。</p>
</blockquote>

<h2><a id="user-content-263-npm-scripts" class="anchor" href="#263-npm-scripts" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.6.3 npm scripts</h2>

<p>npm 提供了灵活而强大的 scripts 功能，见 <a href="https://docs.npmjs.com/misc/scripts">官方文档</a>。</p>

<p>npm 的 scripts 有一些内置的缩写命令，如常用的：</p>

<ul>
<li><div class="code">npm start</div> 等价于 <div class="code">npm run start</div> </li>
<li><div class="code">npm test</div> 等价于 <div class="code">npm run test</div> </li>
</ul>

<h2><a id="user-content-264-npm-shrinkwrap" class="anchor" href="#264-npm-shrinkwrap" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2.6.4 npm shrinkwrap</h2>

<p>前面说过要锁定依赖的版本，但这并不能完全防止意外情况的发生，因为锁定的只是最外一层的依赖，而里层依赖的模块的 package.json 有可能写的是 <div class="code">"mongoose": "*"</div>。为了彻底锁定依赖的版本，让你的应用在任何机器上安装的都是同样版本的模块（不管嵌套多少层），通过运行 <div class="code">npm shrinkwrap</div>，会在当前目录下产生一个 <div class="code">npm-shrinkwrap.json</div>，里面包含了通过 node_modules 计算出的模块的依赖树及版本。上面的截图也显示：只要目录下有 npm-shrinkwrap.json 则运行 <div class="code">npm install</div> 的时候会优先使用 npm-shrinkwrap.json 进行安装，没有则使用 package.json 进行安装。</p>

<p>更多阅读：</p>

<ol>
<li><a href="https://docs.npmjs.com/cli/shrinkwrap">https://docs.npmjs.com/cli/shrinkwrap</a></li>
<li><a href="http://tech.meituan.com/npm-shrinkwrap.html">http://tech.meituan.com/npm-shrinkwrap.html</a></li>
</ol>

<blockquote>
<p>注意: 如果 node_modules 下存在某个模块（如直接通过 <div class="code">npm install xxx</div> 安装的）而 package.json 中没有，运行 <div class="code">npm shrinkwrap</div> 则会报错。另外，<div class="code">npm shrinkwrap</div> 只会生成 dependencies 的依赖，不会生成 devDependencies 的。</p>
</blockquote>
<br />
<p>上一节：<a href="./25">2.5 package.json</a></p>
<%- include('../footer') %>

<p>下一节：<a href="./31">3.1 初始化一个 Express 项目</a></p>
<%- include('../footer') %>