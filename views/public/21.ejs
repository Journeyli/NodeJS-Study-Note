<%- include('../header') %>
        </br></br>
    <div class="title">
    <H1>—李の勉強NOTE</H1>
    </div>
    <div class="main">
    <H2>2.1 require</H2>
    </div>
    <div class="to">
    </br>
    </div>
    <div class="text_eg">
  <div class="four wide column"></div>
  <div class="eight wide column">
<p>require 用来加载一个文件的代码，关于 require 的机制这里不展开讲解，请仔细阅读 <a href="https://nodejs.org/api/modules.html">官方文档</a>。</p>

<p>简单概括以下几点:</p>

<ul>
<li>require 可加载 .js、.json 和 .node 后缀的文件</li>
<li>require 的过程是同步的，所以这样是错误的:</li>
</ul>

<div class="code">setTimeout(() =&gt; {<br />
  module.exports = { a: 'hello' };<br />
}, 0);
</div>

<p>require 这个文件得到的是空对象 <div class="code">{}</div></p>

<ul>
<li>require 目录的机制是:

<ul>
<li>如果目录下有 package.json 并指定了 main 字段，则用之</li>
<li>如果不存在 package.json，则依次尝试加载目录下的 index.js 和 index.node</li>
</ul></li>
<li>require 过的文件会加载到缓存，所以多次 require 同一个文件（模块）不会重复加载</li>
<li>判断是否是程序的入口文件有两种方式:

<ul>
<li>require.main === module（推荐）</li>
<li>module.parent === null</li>
</ul></li>
</ul>

<h4><a id="user-content-循环引用" class="anchor" href="#循环引用" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>循环引用</h4>

<p>循环引用（或循环依赖）简单点来说就是 a 文件 require 了 b 文件，然后 b 文件又反过来 require 了 a 文件。我们用 a-&gt;b 代表 b require 了 a。</p>

<p>简单的情况:</p>

<div class="code">a-&gt;b<br />
b-&gt;a
</div>

<p>复杂点的情况:</p>

<div class="code">a-&gt;b<br />
b-&gt;c<br />
c-&gt;a
</div>

<p>循环引用并不会报错，导致的结果是 require 的结果是空对象 <div class="code">{}</div>，原因是 b require 了 a，a 又去 require 了 b，此时 b 还没初始化好，所以只能拿到初始值 <div class="code">{}</div>。当产生循环引用时一般有两种方法解决：</p>

<ol>
<li><p>通过分离共用的代码到另一个文件解决，如上面简单的情况，可拆出共用的代码到 c 中，如下:</p>

<div class="code">c-&gt;a
c-&gt;b
</div></li>
<li><p>不在最外层 require，在用到的地方 require，通常在函数的内部</p></li>
</ol>

<p>总的来说，循环依赖的陷阱并不大容易出现，但一旦出现了，对于新手来说还真不好定位。它的存在给我们提了个醒，要时刻注意你项目的依赖关系不要过于复杂，哪天你发现一个你明明已经 exports 了的方法报 <div class="code">undefined is not a function</div>，我们就该提醒一下自己：哦，也许是它来了。</p>

<p>官方示例: <a href="https://nodejs.org/api/modules.html#modules_cycles">https://nodejs.org/api/modules.html#modules_cycles</a></p>

<p>上一节：<a href="./121">1.2 MongoDB 的安装与使用</a></p>

<p>下一节：<a href="./22">2.2 exports 和 module.exports</a></p>
<%- include('../footer') %>