<%- include('../header') %>
        </br></br>
    <div class="title">
    <H1>—李の勉強NOTE</H1>
    </div>
    <div class="main">
    <H2>3.2 路由</H2>
    </div>
    <div class="to">
    </br>
    </div>
    <div class="text_eg">
  <div class="four wide column"></div>
  <div class="eight wide column">
<p>前面我们只是挂载了根路径的路由控制器，现在修改 index.js 如下：</p>

<div class="code">var express = require('express');<br />
var app = express();<br />
<br />
app.get('/', function(req, res) {<br />
  res.send('hello, express');<br />
});<br />
<br />
app.get('/users/:name', function(req, res) {<br />
  res.send('hello, ' + req.params.name);
});

app.listen(3000);
</div>

<p>以上代码的意思是：当访问根路径时，依然返回 hello, express，当访问如 <div class="code">localhost:3000/users/nswbmw</div> 路径时，返回 hello, nswbmw。路径中 <div class="code">:name</div> 起了占位符的作用，这个占位符的名字是 name，可以通过 <div class="code">req.params.name</div> 取到实际的值。</p>

<blockquote>
<p>小提示：express 使用了 <a href="https://www.npmjs.com/package/path-to-regexp">path-to-regexp</a> 模块实现的路由匹配。</p>
</blockquote>

<p>不难看出：req 包含了请求来的相关信息，res 则用来返回该请求的响应，更多请查阅 <a href="http://expressjs.com/en/4x/api.html">express 官方文档</a>。下面介绍几个常用的 req 的属性：</p>

<ul>
<li><div style="background-color:#f0f0f0; font:14px Arial Unicode MS,serif; color: #000000; padding:4px 6px; width:100px;">req.query</div>: 解析后的 url 中的 querystring，如 <div style="background-color:#f0f0f0; font:14px Arial Unicode MS,serif; color: #000000; padding:4px 6px; width:100px;">?name=haha</div>，req.query 的值为 <div style="background-color:#f0f0f0; font:14px Arial Unicode MS,serif; color: #000000; padding:4px 6px; width:100px;">{name: 'haha'}</div></li>
<li><div style="background-color:#f0f0f0; font:14px Arial Unicode MS,serif; color: #000000; padding:4px 6px; width:100px;">req.params</div>: 解析 url 中的占位符，如 <div style="background-color:#f0f0f0; font:14px Arial Unicode MS,serif; color: #000000; padding:4px 6px; width:100px;">/:name</div>，访问 /haha，req.params 的值为 <div style="background-color:#f0f0f0; font:14px Arial Unicode MS,serif; color: #000000; padding:4px 6px; width:100px;">{name: 'haha'}</div></li>
<li><div style="background-color:#f0f0f0; font:14px Arial Unicode MS,serif; color: #000000; padding:4px 6px; width:100px;">req.body</div>: 解析后请求体，需使用相关的模块，如 <a href="https://www.npmjs.com/package/body-parser">body-parser</a>，请求体为 <div style="background-color:#f0f0f0; font:14px Arial Unicode MS,serif; color: #000000; padding:4px 6px; width:100px;">{"name": "haha"}</div>，则 req.body 为 <div style="background-color:#f0f0f0; font:14px Arial Unicode MS,serif; color: #000000; padding:4px 6px; width:100px;">{name: 'haha'}</div></li>
</ul>

<h2><a id="user-content-321-expressrouter" class="anchor" href="#321-expressrouter" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3.2.1 express.Router</h2>

<p>上面只是很简单的路由使用的例子（将所有路由控制函数都放到了 index.js），但在实际开发中通常有几十甚至上百的路由，都写在 index.js 既臃肿又不好维护，这时可以使用 express.Router 实现更优雅的路由解决方案。在 myblog 目录下创建空文件夹 routes，在 routes 目录下创建 index.js 和 users.js。最后代码如下：</p>

<p><strong>index.js</strong></p>

<div class="code">var express = require('express');<br />
var app = express();<br />
var indexRouter = require('./routes/index');<br />
var userRouter = require('./routes/users');<br />
<br />
app.use('/', indexRouter);<br />
app.use('/users', userRouter);<br />
<br />
app.listen(3000);
</div>

<p><strong>routes/index.js</strong></p>

<div class="code">var express = require('express');<br />
var router = express.Router();<br />
<br />
router.get('/', function(req, res) {<br />
  res.send('hello, express');<br />
});<br />
<br />
module.exports = router;
</div>

<p><strong>routes/users.js</strong></p>

<div class="code">var express = require('express');<br />
var router = express.Router();<br />
<br />
router.get('/:name', function(req, res) {<br />
  res.send('hello, ' + req.params.name);<br />
});<br />
<br />
module.exports = router;
</div>

<p>以上代码的意思是：我们将 <div style="background-color:#f0f0f0; font:14px Arial Unicode MS,serif; color: #000000; padding:4px 6px; width:50px;">/</div> 和 <div style="background-color:#f0f0f0; font:14px Arial Unicode MS,serif; color: #000000; padding:4px 6px; width:100px;">/users/:name</div> 的路由分别放到了 routes/index.js 和 routes/users.js 中，每个路由文件通过生成一个 express.Router 实例 router 并导出，通过 <div style="background-color:#f0f0f0; font:14px Arial Unicode MS,serif; color: #000000; padding:4px 6px; width:100px;">app.use</div> 挂载到不同的路径。这两种代码实现了相同的功能，但在实际开发中推荐使用 express.Router 将不同的路由分离到不同的路由文件中。</p>

<p>更多 express.Router 的用法见 <a href="http://expressjs.com/en/4x/api.html#router">express 官方文档</a>。</p>

<p>上一节：<a href="./31">3.1 初始化一个 Express 项目</a></p>

<p>下一节：<a href="./33">3.3 模板引擎</a></p>
<%- include('../footer') %>