<%- include('../header') %>
        </br></br>
    <div class="title">
    <H1>—李の勉強NOTE</H1>
    </div>
    <div class="main">
    <H2>2.2 exports 和 module.exports</H2>
    </div>
    <div class="to">
    </br>
    </div>
    <div class="text_eg">
  <div class="four wide column"></div>
  <div class="eight wide column">
<p>require 用来加载代码，而 exports 和 module.exports 则用来导出代码。</p>

<p>很多新手可能会迷惑于 exports 和 module.exports 的区别，为了更好的理解 exports 和 module.exports 的关系，我们先来巩固下 js 的基础。示例：</p>

<p><strong>test.js</strong></p>

<div class="code">var a = {name: 1};<br />
var b = a;<br />

console.log(a);<br />
console.log(b);<br />

b.name = 2;<br />
console.log(a);<br />
console.log(b);<br />

var b = {name: 3};<br />
console.log(a);<br />
console.log(b);
</div>

<p>运行 test.js 结果为：</p>

<div class="code">{ name: 1 }<br />
{ name: 1 }<br />
{ name: 2 }<br />
{ name: 2 }<br />
{ name: 2 }<br />
{ name: 3 }
</div>

<p><strong>解释</strong>：a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一块内存，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当 b 被覆盖时，b 指向了一块新的内存，a 还是指向原来的内存，所以最后两个输出不一样。</p>

<p>明白了上述例子后，我们只需知道三点就知道 exports 和 module.exports 的区别了：</p>

<ol>
<li>module.exports 初始值为一个空对象 {}</li>
<li>exports 是指向的 module.exports 的引用</li>
<li>require() 返回的是 module.exports 而不是 exports</li>
</ol>

<p>Node.js 官方文档的截图证实了我们的观点:</p>

<p><a href="/img/book/2.2.1.png" target="_blank"><img src="/img/book/2.2.1.png" alt="" style="max-width:100%;"></a></p>

<h4><a id="user-content-exports--moduleexports--" class="anchor" href="#exports--moduleexports--" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>exports = module.exports = {...}</h4>

<p>我们经常看到这样的写法：</p>

<div class="code">exports = module.exports = {...}
</div>

<p>上面的代码等价于:</p>

<div class="code">module.exports = {...}<br />
exports = module.exports
</div>

<p>原理很简单：module.exports 指向新的对象时，exports 断开了与 module.exports 的引用，那么通过 exports = module.exports 让 exports 重新指向 module.exports。</p>

<blockquote>
<p>小提示：ES6 的 import 和 export 不在本文的讲解范围，有兴趣的读者可以去学习阮一峰老师的
<a href="http://es6.ruanyifeng.com/">《ECMAScript6入门》</a>。</p>
</blockquote>
<br />
<p>上一节：<a href="./21">2.1 require</a></p>

<p>下一节：<a href="./23">2.3 Promise</a></p>
<%- include('../footer') %>